---
- name: "Install requirements"
  package:
    name: "{{ requirements }}"
    state: "present"
  become: True

- name: "Check that solr group is exist"
  group:
    name: "{{ solr_group }}"
    state: present
  become: True

- name: "Check that solr user is exist"
  user:
    name: "{{ solr_user }}"
    group: "{{ solr_group }}"
    createhome: True
    state: present
  become: True

- name: "Check if Solr Service Exists"
  stat:
    path: /etc/init.d/solr
  register: solr_service_stat

- name: "Set solr service status"
  set_fact:
    solr_service_status: "{{ solr_service_stat.stat.exists }}"

- name: "Get sha1 for solr  {{ solr_version }}"
  set_fact:
    sha1_value: "{{ sha1_url_item }}"
  with_url: "{{ solr_distr_url }}.sha1"
  when: not solr_service_status
  loop_control:
    loop_var: sha1_url_item

# initial deployment of solr
- name: "Download solr {{ solr_version }} archive"
  get_url:
    url: "{{ solr_distr_url }}"
    dest: "{{ dest_solr_path }}.zip"
    checksum: sha1:{{ sha1_value.split(" ")[0] }}
  register: result
  until: result is succeeded
  retries: 10
  delay: 2
  become: True
  when: not solr_service_status

- name: "Unarchive and install solr {{ solr_version }}"
  unarchive:
    creates: "{{ dest_solr_path }}"
    src: "{{ dest_solr_path }}.zip"
    dest: "{{ dest_main_path }}"
    remote_src: True
  become: True
  when: not solr_service_status

- name: "Install solr as service"
  command: /bin/bash {{ dest_solr_path }}/bin/install_solr_service.sh {{ dest_solr_path }}.zip -f -n
  become: True
  when: not solr_service_status

- name: "Install pip packages"
  pip:
    name: "{{ item }}"
    state: present
    extra_args: --upgrade
  with_items:
    - pyOpenSSL
  become: True
